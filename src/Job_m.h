//
// Generated file, do not edit! Created by opp_msgtool 6.0 from Job.msg.
//

#ifndef __LFS_JOB_M_H
#define __LFS_JOB_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif


namespace lfs {

class Job;

}  // namespace lfs


namespace lfs {

/**
 * Class generated from <tt>Job.msg:21</tt> by opp_msgtool.
 * <pre>
 * //
 * // TODO generated message class
 * //
 * message Job
 * {
 *     bool cached;
 *     bool back_from_ost;
 *     char work_type;
 *     int assigned_oss_id;
 *     int assigned_ost_id;
 *     unsigned int job_id;
 *     int task_id; // child of job_id
 *     uint64_t init_data_size;
 *     simtime_t generate_time;
 *     simtime_t arrive_time_queue;
 *     simtime_t leave_time_queue;
 *     simtime_t arrive_time_server;
 *     simtime_t leave_time_server;
 *     omnetpp::cPacket pkg;
 * }
 * </pre>
 */
class Job : public ::omnetpp::cMessage
{
  protected:
    bool cached = false;
    bool back_from_ost = false;
    char work_type = 0;
    int assigned_oss_id = 0;
    int assigned_ost_id = 0;
    unsigned int job_id = 0;
    int task_id = 0;
    uint64_t init_data_size = 0;
    ::omnetpp::simtime_t generate_time = SIMTIME_ZERO;
    ::omnetpp::simtime_t arrive_time_queue = SIMTIME_ZERO;
    ::omnetpp::simtime_t leave_time_queue = SIMTIME_ZERO;
    ::omnetpp::simtime_t arrive_time_server = SIMTIME_ZERO;
    ::omnetpp::simtime_t leave_time_server = SIMTIME_ZERO;
    ::omnetpp::cPacket pkg;

  private:
    void copy(const Job& other);

  protected:
    bool operator==(const Job&) = delete;

  public:
    Job(const char *name=nullptr, short kind=0);
    Job(const Job& other);
    virtual ~Job();
    Job& operator=(const Job& other);
    virtual Job *dup() const override {return new Job(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual bool getCached() const;
    virtual void setCached(bool cached);

    virtual bool getBack_from_ost() const;
    virtual void setBack_from_ost(bool back_from_ost);

    virtual char getWork_type() const;
    virtual void setWork_type(char work_type);

    virtual int getAssigned_oss_id() const;
    virtual void setAssigned_oss_id(int assigned_oss_id);

    virtual int getAssigned_ost_id() const;
    virtual void setAssigned_ost_id(int assigned_ost_id);

    virtual unsigned int getJob_id() const;
    virtual void setJob_id(unsigned int job_id);

    virtual int getTask_id() const;
    virtual void setTask_id(int task_id);

    virtual uint64_t getInit_data_size() const;
    virtual void setInit_data_size(uint64_t init_data_size);

    virtual ::omnetpp::simtime_t getGenerate_time() const;
    virtual void setGenerate_time(::omnetpp::simtime_t generate_time);

    virtual ::omnetpp::simtime_t getArrive_time_queue() const;
    virtual void setArrive_time_queue(::omnetpp::simtime_t arrive_time_queue);

    virtual ::omnetpp::simtime_t getLeave_time_queue() const;
    virtual void setLeave_time_queue(::omnetpp::simtime_t leave_time_queue);

    virtual ::omnetpp::simtime_t getArrive_time_server() const;
    virtual void setArrive_time_server(::omnetpp::simtime_t arrive_time_server);

    virtual ::omnetpp::simtime_t getLeave_time_server() const;
    virtual void setLeave_time_server(::omnetpp::simtime_t leave_time_server);

    virtual const ::omnetpp::cPacket& getPkg() const;
    virtual ::omnetpp::cPacket& getPkgForUpdate() { return const_cast<::omnetpp::cPacket&>(const_cast<Job*>(this)->getPkg());}
    virtual void setPkg(const ::omnetpp::cPacket& pkg);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Job& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Job& obj) {obj.parsimUnpack(b);}


}  // namespace lfs


namespace omnetpp {

template<> inline lfs::Job *fromAnyPtr(any_ptr ptr) { return check_and_cast<lfs::Job*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __LFS_JOB_M_H

